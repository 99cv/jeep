import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';
import { StyleTagOptions } from 'puppeteer';

describe('jeep-columnchart', () => {
  it('renders', async () => {
    const page = await newE2EPage();
    await page.setContent('<body style="display:block;margin:0px;">\
    <jeep-columnchart></jeep-columnchart></body>');

    const element = await page.find('jeep-columnchart');
    expect(element).toHaveClass('hydrated');
  });
  describe('rendering', () => {
    let page: E2EPage;
    let element: E2EElement;
    let datapoints: any;
    beforeEach(async () => {
      page = await newE2EPage();
      await page.setContent('<jeep-columnchart></jeep-columnchart>');
      element = await page.find('jeep-columnchart');
      datapoints = '{"data":[{"label":"Apple","y":10,"color":"#00ff00"},'
      datapoints += '{"label":"Orange","y":17,"color":"#ff0000"},'
      datapoints += '{"label":"Banana","y":12,"color":"#0000ff"},'
      datapoints += '{"label":"Mango","y":30,"color":"#ffff00"},'
      datapoints += '{"label":"Grape","y":28,"color":"#00ffff"}]}'
    });
    afterEach(() => {
      page = null;
      element = null;
    });
    it('should not display div-columnchart-container when no datapoints given', async () => {
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      expect(divEl).toBeFalsy();
    });
    it('should not work without datapoints', async () => {
      const errEl: E2EElement = await page.find('jeep-columnchart >>> #div-error-message');
      expect(errEl).toBeDefined();
    });
    it('should display "Error: no datapoints property" when no datapoints property', async () => {
      const pEl: E2EElement = await page.find('jeep-columnchart >>> #p-error-message');
      expect(pEl.textContent).toEqual("Error: no datapoints property");
    });
    it('should work with datapoints', async () => {
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      const errEl: E2EElement = await page.find('jeep-columnchart >>> #div-error-message');
      expect(errEl).toBeNull();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      expect(divEl).toBeDefined();
    });
    it('should create the svg component', async () => {
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      expect(divEl).toBeDefined();
      const svgEl: E2EElement = await divEl.find('svg');
      expect(svgEl).toBeDefined();
      expect(svgEl.getAttribute('viewBox')).toEqual('0 0 800 600');
      expect(svgEl.getAttribute('width')).toEqual('800');
      expect(svgEl.getAttribute('height')).toEqual('600');
    });
    it('should have a rect element in the svg component', async () => {
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const rectEl: E2EElement = await svgEl.find('rect');
      expect(rectEl.getAttribute('id')).toEqual('svg-border-rect');
      expect(rectEl.getAttribute('x')).toEqual('0');
      expect(rectEl.getAttribute('y')).toEqual('0');
      expect(rectEl.getAttribute('width')).toEqual('800');
      expect(rectEl.getAttribute('height')).toEqual('600');
    });

    it('should have 2 group elements in the svg component', async () => {
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(2);
      expect(gEls[0].getAttribute('id')).toEqual('columnchart-axes');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-data');
    });
    it('should have 3 group elements in the svg component when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(3);
      expect(gEls[0].getAttribute('id')).toEqual('columnchart-title');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      expect(gEls[2].getAttribute('id')).toEqual('columnchart-data');
    });
    it('should have 4 group elements in the svg component when ctitle and xtitle properties given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(4);
      expect(gEls[0].getAttribute('id')).toEqual('columnchart-title');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      expect(gEls[2].getAttribute('id')).toEqual('columnchart-xtitle');
      expect(gEls[2].getAttribute('transform')).toEqual('translate(9,0)');
      expect(gEls[3].getAttribute('id')).toEqual('columnchart-data');
    });
    it('should have 5 group elements in the svg component when ctitle,xtitle and ytitle properties given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(5);
      expect(gEls[0].getAttribute('id')).toEqual('columnchart-title');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEls: E2EElement[] = await gEls[1].findAll('line');
      expect(lineEls.length).toEqual(6);
      expect(gEls[2].getAttribute('id')).toEqual('columnchart-ytitle');
      expect(gEls[2].getAttribute('transform')).toEqual('translate(0,-19)');
      expect(gEls[3].getAttribute('id')).toEqual('columnchart-xtitle');
      expect(gEls[3].getAttribute('transform')).toEqual('translate(9,0)');
      expect(gEls[4].getAttribute('id')).toEqual('columnchart-data');
    });
    it('should have a text element in the group columnchart-title when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const titleEl: E2EElement = await svgEl.find('#columnchart-title-text');
      expect(titleEl.textContent).toEqual('Basic Column Chart');
      expect(titleEl.getAttribute('id')).toEqual('columnchart-title-text');
      expect(titleEl.getAttribute('x')).toEqual('400');
      expect(titleEl.getAttribute('y')).toEqual('20');
      expect(titleEl.getAttribute('font-family')).toEqual('Verdana');
      expect(titleEl.getAttribute('font-size')).toEqual('10px');
      expect(titleEl.getAttribute('text-anchor')).toEqual('middle');
      expect(titleEl.getAttribute('fill')).toEqual('#000000');
    });
    it('should have a second text element in the group columnchart-title when subtitle property given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const titleEl: E2EElement = await svgEl.find('#columnchart-subtitle-text');
      expect(titleEl.textContent).toEqual('test sub-title');
      expect(titleEl.getAttribute('id')).toEqual('columnchart-subtitle-text');
      expect(titleEl.getAttribute('x')).toEqual('400');
      expect(titleEl.getAttribute('y')).toEqual('37');
      expect(titleEl.getAttribute('font-family')).toEqual('Verdana');
      expect(titleEl.getAttribute('font-size')).toEqual('10px');
      expect(titleEl.getAttribute('text-anchor')).toEqual('middle');
      expect(titleEl.getAttribute('fill')).toEqual('#000000');
    });  
    it('should have 5 rect elements in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEls: E2EElement[] = await gDatapoint.findAll('rect')
      expect(rectEls.length).toEqual(5);
      expect(rectEls[0].getAttribute('id')).toEqual('columnchart-data-Apple');
      expect(rectEls[1].getAttribute('id')).toEqual('columnchart-data-Orange');
      expect(rectEls[2].getAttribute('id')).toEqual('columnchart-data-Banana');
      expect(rectEls[3].getAttribute('id')).toEqual('columnchart-data-Mango');
      expect(rectEls[4].getAttribute('id')).toEqual('columnchart-data-Grape');
    });
    it('should have columnchart-data-Apple as first rect in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Apple')
      expect(rectEl.getAttribute('id')).toEqual('columnchart-data-Apple');
      expect(rectEl.getAttribute('x')).toEqual('44');
      expect(rectEl.getAttribute('y')).toEqual('436.25');
      expect(rectEl.getAttribute('width')).toEqual('132');
      expect(rectEl.getAttribute('height')).toEqual('125.75');
      expect(rectEl.getAttribute('fill')).toEqual('#00ff00');
    });
    it('should not have 2 animate elements in columnchart-data-Apple', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Apple')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(0);
    });
    it('should have 2 animate elements in columnchart-data-Apple', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Apple')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(2);
      expect(animEls[0].getAttribute('attributeName')).toEqual('height');
      expect(animEls[0].getAttribute('from')).toEqual('0');
      expect(animEls[0].getAttribute('to')).toEqual('125.75');
      expect(animEls[0].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[0].getAttribute('fill')).toEqual('freeze');
      expect(animEls[1].getAttribute('attributeName')).toEqual('y');
      expect(animEls[1].getAttribute('from')).toEqual('562');
      expect(animEls[1].getAttribute('to')).toEqual('436.25');
      expect(animEls[1].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[1].getAttribute('fill')).toEqual('freeze');
    });

    it('should have columnchart-data-Orange as second rect in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Orange')
      expect(rectEl.getAttribute('id')).toEqual('columnchart-data-Orange');
      expect(rectEl.getAttribute('x')).toEqual('192');
      expect(parseFloat(rectEl.getAttribute('y'))).toBeCloseTo(348.225);
      expect(rectEl.getAttribute('width')).toEqual('132');
      expect(parseFloat(rectEl.getAttribute('height'))).toBeCloseTo(213.775);
      expect(rectEl.getAttribute('fill')).toEqual('#ff0000');
    });
    it('should not have 2 animate elements in columnchart-data-Orange', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Orange')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(0);
    });
    it('should have 2 animate elements in columnchart-data-Orange', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Orange')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(2);
      expect(animEls[0].getAttribute('attributeName')).toEqual('height');
      expect(animEls[0].getAttribute('from')).toEqual('0');
      expect(parseFloat(animEls[0].getAttribute('to'))).toBeCloseTo(213.775);
      expect(animEls[0].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[0].getAttribute('fill')).toEqual('freeze');
      expect(animEls[1].getAttribute('attributeName')).toEqual('y');
      expect(animEls[1].getAttribute('from')).toEqual('562');
      expect(parseFloat(animEls[1].getAttribute('to'))).toBeCloseTo(348.225);
      expect(animEls[1].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[1].getAttribute('fill')).toEqual('freeze');
    });
    it('should have columnchart-data-Banana as third rect in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Banana')
      expect(rectEl.getAttribute('id')).toEqual('columnchart-data-Banana');
      expect(rectEl.getAttribute('x')).toEqual('340');
      expect(rectEl.getAttribute('y')).toEqual('411.1');
      expect(rectEl.getAttribute('width')).toEqual('132');
      expect(parseFloat(rectEl.getAttribute('height'))).toBeCloseTo(150.9);
      expect(rectEl.getAttribute('fill')).toEqual('#0000ff');
    });
    it('should not have 2 animate elements in columnchart-data-Banana', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Banana')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(0);
    });
    it('should have 2 animate elements in columnchart-data-Banana', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Banana')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(2);
      expect(animEls[0].getAttribute('attributeName')).toEqual('height');
      expect(animEls[0].getAttribute('from')).toEqual('0');
      expect(parseFloat(animEls[0].getAttribute('to'))).toBeCloseTo(150.9);
      expect(animEls[0].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[0].getAttribute('fill')).toEqual('freeze');
      expect(animEls[1].getAttribute('attributeName')).toEqual('y');
      expect(animEls[1].getAttribute('from')).toEqual('562');
      expect(animEls[1].getAttribute('to')).toEqual('411.1');
      expect(animEls[1].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[1].getAttribute('fill')).toEqual('freeze');
    });
    it('should have columnchart-data-Mango as fourth rect in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Mango')
      expect(rectEl.getAttribute('id')).toEqual('columnchart-data-Mango');
      expect(rectEl.getAttribute('x')).toEqual('488');
      expect(rectEl.getAttribute('y')).toEqual('184.75');
      expect(rectEl.getAttribute('width')).toEqual('132');
      expect(rectEl.getAttribute('height')).toEqual('377.25');
      expect(rectEl.getAttribute('fill')).toEqual('#ffff00');
    });
    it('should not have 2 animate elements in columnchart-data-Mango', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Mango')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(0);
    });
    it('should have 2 animate elements in columnchart-data-Mango', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Mango')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(2);
      expect(animEls[0].getAttribute('attributeName')).toEqual('height');
      expect(animEls[0].getAttribute('from')).toEqual('0');
      expect(animEls[0].getAttribute('to')).toEqual('377.25');
      expect(animEls[0].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[0].getAttribute('fill')).toEqual('freeze');
      expect(animEls[1].getAttribute('attributeName')).toEqual('y');
      expect(animEls[1].getAttribute('from')).toEqual('562');
      expect(animEls[1].getAttribute('to')).toEqual('184.75');
      expect(animEls[1].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[1].getAttribute('fill')).toEqual('freeze');
    });
    it('should have columnchart-data-Grap as fifth rect in the group columnchart-datapoint', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Grape')
      expect(rectEl.getAttribute('id')).toEqual('columnchart-data-Grape');
      expect(rectEl.getAttribute('x')).toEqual('636');
      expect(rectEl.getAttribute('y')).toEqual('209.9');
      expect(rectEl.getAttribute('width')).toEqual('132');
      expect(rectEl.getAttribute('height')).toEqual('352.1');
      expect(rectEl.getAttribute('fill')).toEqual('#00ffff');
    });
    it('should not have 2 animate elements in columnchart-data-Grap', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Grape')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(0);
    });
    it('should have 2 animate elements in columnchart-data-Grap', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gDatapoint: E2EElement = await svgEl.find('#columnchart-data');
      const rectEl: E2EElement = await gDatapoint.find('#columnchart-data-Grape')
      const animEls: E2EElement[] = await rectEl.findAll('animate');
      expect(animEls.length).toEqual(2);
      expect(animEls[0].getAttribute('attributeName')).toEqual('height');
      expect(animEls[0].getAttribute('from')).toEqual('0');
      expect(animEls[0].getAttribute('to')).toEqual('352.1');
      expect(animEls[0].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[0].getAttribute('fill')).toEqual('freeze');
      expect(animEls[1].getAttribute('attributeName')).toEqual('y');
      expect(animEls[1].getAttribute('from')).toEqual('562');
      expect(animEls[1].getAttribute('to')).toEqual('209.9');
      expect(animEls[1].getAttribute('dur')).toEqual('0.5s');
      expect(animEls[1].getAttribute('fill')).toEqual('freeze');
    });
    it('should have 6 line elements in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEls: E2EElement[] = await gEls[1].findAll('line');
      expect(lineEls.length).toEqual(6);
      expect(lineEls[0].getAttribute('id')).toEqual('columnchart-yaxis');
      expect(lineEls[1].getAttribute('id')).toEqual('columnchart-yLine40');
      expect(lineEls[2].getAttribute('id')).toEqual('columnchart-yLine30');
      expect(lineEls[3].getAttribute('id')).toEqual('columnchart-yLine20');
      expect(lineEls[4].getAttribute('id')).toEqual('columnchart-yLine10');
      expect(lineEls[5].getAttribute('id')).toEqual('columnchart-xaxis');
    });
    it('should have 10 text elements in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEls: E2EElement[] = await gEls[1].findAll('text');
      expect(textEls.length).toEqual(10);
      expect(textEls[0].getAttribute('id')).toEqual('columnchart-ylabel40');
      expect(textEls[1].getAttribute('id')).toEqual('columnchart-ylabel30');
      expect(textEls[2].getAttribute('id')).toEqual('columnchart-ylabel20');
      expect(textEls[3].getAttribute('id')).toEqual('columnchart-ylabel10');
      expect(textEls[4].getAttribute('id')).toEqual('columnchart-ylabel0');
      expect(textEls[5].getAttribute('id')).toEqual('columnchart-xlabelApple');
      expect(textEls[6].getAttribute('id')).toEqual('columnchart-xlabelOrange');
      expect(textEls[7].getAttribute('id')).toEqual('columnchart-xlabelBanana');
      expect(textEls[8].getAttribute('id')).toEqual('columnchart-xlabelMango');
      expect(textEls[9].getAttribute('id')).toEqual('columnchart-xlabelGrape');
    });
    it('should have columnchart-yaxis as first line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-yaxis');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-yaxis');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('59');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-yLine40 as second line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-yLine40');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-yLine40');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('59');
      expect(lineEl.getAttribute('x2')).toEqual('780');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-yLine30 as third line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-yLine30');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-yLine30');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('184.75');
      expect(lineEl.getAttribute('x2')).toEqual('780');
      expect(lineEl.getAttribute('y2')).toEqual('184.75');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-yLine20 as fourth line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-yLine20');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-yLine20');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('310.5');
      expect(lineEl.getAttribute('x2')).toEqual('780');
      expect(lineEl.getAttribute('y2')).toEqual('310.5');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-yLine10 as fifth line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-yLine10');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-yLine10');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('436.25');
      expect(lineEl.getAttribute('x2')).toEqual('780');
      expect(lineEl.getAttribute('y2')).toEqual('436.25');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xaxis as sixth line in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xaxis');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xaxis');
      expect(lineEl.getAttribute('x1')).toEqual('36');
      expect(lineEl.getAttribute('y1')).toEqual('562');
      expect(lineEl.getAttribute('x2')).toEqual('780');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-ylabel40 as first text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-ylabel40');
      expect(textEl.getAttribute('id')).toEqual('columnchart-ylabel40');
      expect(textEl.getAttribute('x')).toEqual('34');
      expect(textEl.getAttribute('y')).toEqual('62');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('end');
      expect(textEl.textContent).toEqual('40');
    });
    it('should have columnchart-ylabel30 as second text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-ylabel30');
      expect(textEl.getAttribute('id')).toEqual('columnchart-ylabel30');
      expect(textEl.getAttribute('x')).toEqual('34');
      expect(textEl.getAttribute('y')).toEqual('187.75');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('end');
      expect(textEl.textContent).toEqual('30');
    });
    it('should have columnchart-ylabel20 as third text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-ylabel20');
      expect(textEl.getAttribute('id')).toEqual('columnchart-ylabel20');
      expect(textEl.getAttribute('x')).toEqual('34');
      expect(textEl.getAttribute('y')).toEqual('313.5');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('end');
      expect(textEl.textContent).toEqual('20');
    });
    it('should have columnchart-ylabel10 as fourth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-ylabel10');
      expect(textEl.getAttribute('id')).toEqual('columnchart-ylabel10');
      expect(textEl.getAttribute('x')).toEqual('34');
      expect(textEl.getAttribute('y')).toEqual('439.25');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('end');
      expect(textEl.textContent).toEqual('10');
    });
    it('should have columnchart-ylabel0 as fifth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-ylabel0');
      expect(textEl.getAttribute('id')).toEqual('columnchart-ylabel0');
      expect(textEl.getAttribute('x')).toEqual('34');
      expect(textEl.getAttribute('y')).toEqual('565');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('end');
      expect(textEl.textContent).toEqual('0');
    });
    it('should have columnchart-xlabelApple as sixth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-xlabelApple');
      expect(textEl.getAttribute('id')).toEqual('columnchart-xlabelApple');
      expect(textEl.getAttribute('x')).toEqual('110');
      expect(textEl.getAttribute('y')).toEqual('572');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('transform')).toEqual('rotate(0,110,572)');
      expect(textEl.textContent).toEqual('Apple');
    });
    it('should have columnchart-xlabelOrange as seventh text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-xlabelOrange');
      expect(textEl.getAttribute('id')).toEqual('columnchart-xlabelOrange');
      expect(textEl.getAttribute('x')).toEqual('258');
      expect(textEl.getAttribute('y')).toEqual('572');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('transform')).toEqual('rotate(0,258,572)');
      expect(textEl.textContent).toEqual('Orange');
    });
    it('should have columnchart-xlabelBanana as eighth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-xlabelBanana');
      expect(textEl.getAttribute('id')).toEqual('columnchart-xlabelBanana');
      expect(textEl.getAttribute('x')).toEqual('406');
      expect(textEl.getAttribute('y')).toEqual('572');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('transform')).toEqual('rotate(0,406,572)');
      expect(textEl.textContent).toEqual('Banana');
    });
    it('should have columnchart-xlabelMango as nineth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-xlabelMango');
      expect(textEl.getAttribute('id')).toEqual('columnchart-xlabelMango');
      expect(textEl.getAttribute('x')).toEqual('554');
      expect(textEl.getAttribute('y')).toEqual('572');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('transform')).toEqual('rotate(0,554,572)');
      expect(textEl.textContent).toEqual('Mango');
    });
    it('should have columnchart-xlabelGrape as tenth text in the group columnchart-axes', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const textEl: E2EElement = await gEls[1].find('#columnchart-xlabelGrape');
      expect(textEl.getAttribute('id')).toEqual('columnchart-xlabelGrape');
      expect(textEl.getAttribute('x')).toEqual('702');
      expect(textEl.getAttribute('y')).toEqual('572');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('stroke')).toEqual('#000000');
      expect(textEl.getAttribute('stroke-width')).toEqual('1');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('transform')).toEqual('rotate(0,702,572)');
      expect(textEl.textContent).toEqual('Grape');
    });
    it('should have a text element in the group columnchart-ytitle when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[2].getAttribute('id')).toEqual('columnchart-ytitle');
      const titleEl: E2EElement = await gEls[2].find('#columnchart-ytitle-text');
      expect(titleEl.textContent).toEqual('test for y-axis');
      expect(titleEl.getAttribute('id')).toEqual('columnchart-ytitle-text');
      expect(titleEl.getAttribute('x')).toEqual('15');
      expect(titleEl.getAttribute('y')).toEqual('330');
      expect(titleEl.getAttribute('font-family')).toEqual('Verdana');
      expect(titleEl.getAttribute('font-size')).toEqual('10px');
      expect(titleEl.getAttribute('text-anchor')).toEqual('middle');
      expect(titleEl.getAttribute('fill')).toEqual('#000000');
      expect(titleEl.getAttribute('transform')).toEqual('rotate(-90 15 330)');
    });
    it('should have a text element in the group columnchart-xtitle when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[3].getAttribute('id')).toEqual('columnchart-xtitle');
      const titleEl: E2EElement = await gEls[3].find('#columnchart-xtitle-text');
      expect(titleEl.textContent).toEqual('test for x-axis');
      expect(titleEl.getAttribute('id')).toEqual('columnchart-xtitle-text');
      expect(titleEl.getAttribute('x')).toEqual('399');
      expect(titleEl.getAttribute('y')).toEqual('590');
      expect(titleEl.getAttribute('font-family')).toEqual('Verdana');
      expect(titleEl.getAttribute('font-size')).toEqual('10px');
      expect(titleEl.getAttribute('text-anchor')).toEqual('middle');
      expect(titleEl.getAttribute('fill')).toEqual('#000000');
    });
    it('should have 11 line elements in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEls: E2EElement[] = await gEls[1].findAll('line');
      expect(lineEls.length).toEqual(11);
      expect(lineEls[0].getAttribute('id')).toEqual('columnchart-yaxis');
      expect(lineEls[1].getAttribute('id')).toEqual('columnchart-yLine40');
      expect(lineEls[2].getAttribute('id')).toEqual('columnchart-yLine30');
      expect(lineEls[3].getAttribute('id')).toEqual('columnchart-yLine20');
      expect(lineEls[4].getAttribute('id')).toEqual('columnchart-yLine10');
      expect(lineEls[5].getAttribute('id')).toEqual('columnchart-xaxis');
      expect(lineEls[6].getAttribute('id')).toEqual('columnchart-xtick0');
      expect(lineEls[7].getAttribute('id')).toEqual('columnchart-xtick1');
      expect(lineEls[8].getAttribute('id')).toEqual('columnchart-xtick2');
      expect(lineEls[9].getAttribute('id')).toEqual('columnchart-xtick3');
      expect(lineEls[10].getAttribute('id')).toEqual('columnchart-xtick4');
    });
    it('should have columnchart-xtick0 in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xtick0');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xtick0');
      expect(lineEl.getAttribute('x1')).toEqual('110');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('110');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xtick1 in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xtick1');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xtick1');
      expect(lineEl.getAttribute('x1')).toEqual('258');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('258');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xtick2 in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xtick2');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xtick2');
      expect(lineEl.getAttribute('x1')).toEqual('406');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('406');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xtick3 in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xtick3');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xtick3');
      expect(lineEl.getAttribute('x1')).toEqual('554');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('554');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xtick4 in the group columnchart-axes when --chart-tick-x-length:4px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xtick4');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xtick4');
      expect(lineEl.getAttribute('x1')).toEqual('702');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('702');
      expect(lineEl.getAttribute('y2')).toEqual('562');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have 16 line elements in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEls: E2EElement[] = await gEls[1].findAll('line');
      expect(lineEls.length).toEqual(16);
      expect(lineEls[0].getAttribute('id')).toEqual('columnchart-yaxis');
      expect(lineEls[1].getAttribute('id')).toEqual('columnchart-yLine40');
      expect(lineEls[2].getAttribute('id')).toEqual('columnchart-ytick40');
      expect(lineEls[3].getAttribute('id')).toEqual('columnchart-yLine30');
      expect(lineEls[4].getAttribute('id')).toEqual('columnchart-ytick30');
      expect(lineEls[5].getAttribute('id')).toEqual('columnchart-yLine20');
      expect(lineEls[6].getAttribute('id')).toEqual('columnchart-ytick20');
      expect(lineEls[7].getAttribute('id')).toEqual('columnchart-yLine10');
      expect(lineEls[8].getAttribute('id')).toEqual('columnchart-ytick10');
      expect(lineEls[9].getAttribute('id')).toEqual('columnchart-xaxis');
      expect(lineEls[10].getAttribute('id')).toEqual('columnchart-ytick0');
      expect(lineEls[11].getAttribute('id')).toEqual('columnchart-xtick0');
      expect(lineEls[12].getAttribute('id')).toEqual('columnchart-xtick1');
      expect(lineEls[13].getAttribute('id')).toEqual('columnchart-xtick2');
      expect(lineEls[14].getAttribute('id')).toEqual('columnchart-xtick3');
      expect(lineEls[15].getAttribute('id')).toEqual('columnchart-xtick4');
    });
    it('should have columnchart-ytick40 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-ytick40');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-ytick40');
      expect(lineEl.getAttribute('x1')).toEqual('41');
      expect(lineEl.getAttribute('y1')).toEqual('59');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-ytick30 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-ytick30');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-ytick30');
      expect(lineEl.getAttribute('x1')).toEqual('41');
      expect(lineEl.getAttribute('y1')).toEqual('183.75');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('183.75');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-ytick20 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-ytick20');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-ytick20');
      expect(lineEl.getAttribute('x1')).toEqual('41');
      expect(lineEl.getAttribute('y1')).toEqual('308.5');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('308.5');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-ytick10 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-ytick10');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-ytick10');
      expect(lineEl.getAttribute('x1')).toEqual('41');
      expect(lineEl.getAttribute('y1')).toEqual('433.25');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('433.25');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-ytick0 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-ytick0');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-ytick0');
      expect(lineEl.getAttribute('x1')).toEqual('41');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('36');
      expect(lineEl.getAttribute('y2')).toEqual('558');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have 21 line elements in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEls: E2EElement[] = await gEls[1].findAll('line');
      expect(lineEls.length).toEqual(21);
      expect(lineEls[0].getAttribute('id')).toEqual('columnchart-yaxis');
      expect(lineEls[1].getAttribute('id')).toEqual('columnchart-yLine40');
      expect(lineEls[2].getAttribute('id')).toEqual('columnchart-ytick40');
      expect(lineEls[3].getAttribute('id')).toEqual('columnchart-yLine30');
      expect(lineEls[4].getAttribute('id')).toEqual('columnchart-ytick30');
      expect(lineEls[5].getAttribute('id')).toEqual('columnchart-yLine20');
      expect(lineEls[6].getAttribute('id')).toEqual('columnchart-ytick20');
      expect(lineEls[7].getAttribute('id')).toEqual('columnchart-yLine10');
      expect(lineEls[8].getAttribute('id')).toEqual('columnchart-ytick10');
      expect(lineEls[9].getAttribute('id')).toEqual('columnchart-xaxis');
      expect(lineEls[10].getAttribute('id')).toEqual('columnchart-ytick0');
      expect(lineEls[11].getAttribute('id')).toEqual('columnchart-xLine0');
      expect(lineEls[12].getAttribute('id')).toEqual('columnchart-xtick0');
      expect(lineEls[13].getAttribute('id')).toEqual('columnchart-xLine1');
      expect(lineEls[14].getAttribute('id')).toEqual('columnchart-xtick1');
      expect(lineEls[15].getAttribute('id')).toEqual('columnchart-xLine2');
      expect(lineEls[16].getAttribute('id')).toEqual('columnchart-xtick2');
      expect(lineEls[17].getAttribute('id')).toEqual('columnchart-xLine3');
      expect(lineEls[18].getAttribute('id')).toEqual('columnchart-xtick3');
      expect(lineEls[19].getAttribute('id')).toEqual('columnchart-xLine4');
      expect(lineEls[20].getAttribute('id')).toEqual('columnchart-xtick4');
    });
    it('should have columnchart-xLine0 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xLine0');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xLine0');
      expect(lineEl.getAttribute('x1')).toEqual('114');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('114');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xLine1 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xLine1');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xLine1');
      expect(lineEl.getAttribute('x1')).toEqual('261');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('261');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xLine2 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xLine2');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xLine2');
      expect(lineEl.getAttribute('x1')).toEqual('408');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('408');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });
    it('should have columnchart-xLine3 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xLine3');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xLine3');
      expect(lineEl.getAttribute('x1')).toEqual('555');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('555');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });

    it('should have columnchart-xLine4 in the group columnchart-axes \
        when --chart-tick-x-length:4px and --chart-tick-y-length:5px and --chart-grid-x: true', async () => {
      element.setProperty('ctitle','Basic Column Chart');
      element.setProperty('subtitle','test sub-title');
      element.setProperty('xtitle','test for x-axis');
      element.setProperty('ytitle','test for y-axis');
      element.setProperty('datapoints',datapoints);
      const opts:StyleTagOptions = {content:':root{--chart-tick-x-length:4px;--chart-tick-y-length:5px;--chart-grid-x: true;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-columnchart >>> #div-columnchart-container');
      const svgEl: E2EElement = await divEl.find('svg');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls[1].getAttribute('id')).toEqual('columnchart-axes');
      const lineEl: E2EElement = await gEls[1].find('#columnchart-xLine4');
      expect(lineEl.getAttribute('id')).toEqual('columnchart-xLine4');
      expect(lineEl.getAttribute('x1')).toEqual('702');
      expect(lineEl.getAttribute('y1')).toEqual('558');
      expect(lineEl.getAttribute('x2')).toEqual('702');
      expect(lineEl.getAttribute('y2')).toEqual('59');
      expect(lineEl.getAttribute('stroke')).toEqual('#000000');
      expect(lineEl.getAttribute('stroke-width')).toEqual('1');
    });

  });

});
