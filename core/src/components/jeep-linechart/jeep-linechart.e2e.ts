import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';
import { StyleTagOptions } from 'puppeteer';

describe('jeep-linechart', () => {
  it('renders', async () => {
    const page = await newE2EPage();

    await page.setContent('<jeep-linechart></jeep-linechart>');
    const element = await page.find('jeep-linechart');
    expect(element).toHaveClass('hydrated');
  });
  describe('rendering', () => {
    let page: E2EPage;
    let element: E2EElement;
    let data: any;

    beforeEach(async () => {
      page = await newE2EPage();
      await page.setContent('<body style="margin:0px;font-family:sans-serif;overflow:hidden;position: fixed;">\
        <jeep-linechart></jeep-linechart></body>');
      element = await page.find('jeep-linechart');
      data='{"color": "#425cef","name": "Line 1",';
      data += '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      data += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 },';
      data += '{ "x": 60, "y": 500 },{ "x": 70, "y": 480 },{ "x": 80, "y": 480 },';
      data += '{ "x": 90, "y": 410 },{ "x": 100, "y": 500 },{ "x": 110, "y": 480 },';
      data += '{ "x": 120, "y": 510 }]}'; 
    });
    afterEach(() => {
      page = null;
      element = null;
    });
    it('should not display div-columnchart-container when no data given', async () => {
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      expect(divEl).toBeFalsy();
    });
    it('should not work without data', async () => {
      const errEl: E2EElement = await page.find('jeep-linechart >>> #div-error-message');
      expect(errEl).toBeDefined();
    });
    it('should display "Error: no datapoints property" when no datapoints property', async () => {
      const pEl: E2EElement = await page.find('jeep-linechart >>> #p-error-message');
      expect(pEl.textContent).toEqual("Error: no data property");
    });
    it('should work with data', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      const errEl: E2EElement = await page.find('jeep-linechart >>> #div-error-message');
      expect(errEl).toBeNull();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const chartEl: E2EElement = await divEl.find('#div-linechart-chart');
      expect(divEl).not.toBeNull();
      expect(chartEl).not.toBeNull();
    });
    it('should create the svg component', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      expect(divEl).not.toBeNull();
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      expect(svgEl).not.toBeNull();
      expect(svgEl.getAttribute('viewBox')).toEqual('0 0 800 600');
      expect(svgEl.getAttribute('width')).toEqual('800');
      expect(svgEl.getAttribute('height')).toEqual('600');
    });
    it('should create a defs component as child of svg component', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      expect(defsEl).not.toBeNull();
    });
    it('should have five group component in the defs component', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      expect(gEls.length).toEqual(5);
      expect(gEls[0].getAttribute('id')).toEqual('marker-circle');
      expect(gEls[1].getAttribute('id')).toEqual('marker-square');
      expect(gEls[2].getAttribute('id')).toEqual('marker-triangle');
      expect(gEls[3].getAttribute('id')).toEqual('marker-cross');
      expect(gEls[4].getAttribute('id')).toEqual('marker-plus');
    });
    it('should have a path component in gEls[0]', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[0].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,5 A5,5 0 1,1 10,5 A5,5 0 0,1 0,5 Z');
    });
    it('should have a path component in gEls[1]', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[1].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,0 L10,0 L10,10 L0,10 Z');
    });
    it('should have a path component in gEls[2]', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[2].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M5,0 L10,10 L0,10 Z');
    });
    it('should have a path component in gEls[3]', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[3].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,2 L2,0 L5,3 L8,0 L10,2 L7,5 L10,8 L8,10 L5,7 L2,10 L0,8 L3,5 Z');
    });
    it('should have a path component in gEls[4]', async () => {
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[4].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,4 L4,4 L4,0 L6,0 L6,4 L10,4 L10,6 L6,6 L6,10 L4,10 L4,6 L0,6 Z');
    });
    it('should create a g component as child of svg component when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Line Chart');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-title');
      const textEls: E2EElement[] = await gEl.findAll('text');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-title');
      expect(textEls.length).toEqual(1);
      expect(textEls[0].getAttribute('id')).toEqual('linechart-title-text');
      expect(textEls[0].textContent).toEqual('Basic Line Chart');
      expect(textEls[0].getAttribute('x')).toEqual('400');
      expect(textEls[0].getAttribute('y')).toEqual('20');
      expect(textEls[0].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[0].getAttribute('font-size')).toEqual('10px');
      expect(textEls[0].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[0].getAttribute('fill')).toEqual('#000000');
    });
    it('should have a g component with id="linechart-axes" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      // ********************************
      // below should work but it does not
      //const gEl: E2EElement = await svgEl.find('#linechart-axes');
      //expect(gEl).not.toBeNull();
      //expect(gEl[0].getAttribute('id')).toEqual('linechart-axes');
      // ********************************
      // replace by below
      // ********************************
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(20); // 5 from defs,3 as childs of svg and 12 from marker "none"
      expect(gEls[6].getAttribute('id')).toEqual('linechart-axes');
    });
    it('should have 5 line elements in the group element having id="linechart-axes"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      const lineEls: E2EElement[] = await gEls[6].findAll('line');
      expect(lineEls.length).toEqual(5);
      expect(lineEls[0].getAttribute('id')).toEqual('linechart-yaxis');
      expect(lineEls[0].getAttribute('x1')).toEqual('25');
      expect(lineEls[0].getAttribute('y1')).toEqual('49');
      expect(lineEls[0].getAttribute('x2')).toEqual('25');
      expect(lineEls[0].getAttribute('y2')).toEqual('575');
      expect(lineEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[1].getAttribute('id')).toEqual('linechart-yLine600');
      expect(lineEls[1].getAttribute('x1')).toEqual('25');
      expect(lineEls[1].getAttribute('y1')).toEqual('49');
      expect(lineEls[1].getAttribute('x2')).toEqual('780');
      expect(lineEls[1].getAttribute('y2')).toEqual('49');
      expect(lineEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-yLine400');
      expect(lineEls[2].getAttribute('x1')).toEqual('25');
      expect(Number(lineEls[2].getAttribute('y1')).toFixed(1)).toEqual('224.3');
      expect(lineEls[2].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[2].getAttribute('y2')).toFixed(1)).toEqual('224.3');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[3].getAttribute('id')).toEqual('linechart-yLine200');
      expect(lineEls[3].getAttribute('x1')).toEqual('25');
      expect(Number(lineEls[3].getAttribute('y1')).toFixed(1)).toEqual('399.7');
      expect(lineEls[3].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[3].getAttribute('y2')).toFixed(1)).toEqual('399.7');
      expect(lineEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-xaxis');
      expect(lineEls[4].getAttribute('x1')).toEqual('25');
      expect(lineEls[4].getAttribute('y1')).toEqual('575');
      expect(lineEls[4].getAttribute('x2')).toEqual('780');
      expect(lineEls[4].getAttribute('y2')).toEqual('575');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');

    });
    it('should have 8 text elements in the group element having id="linechart-axes"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      const textEls: E2EElement[] = await gEls[6].findAll('text');
      expect(textEls.length).toEqual(8);
      expect(textEls[0].getAttribute('id')).toEqual('linechart-ylabel600');
      expect(textEls[0].textContent).toEqual('600');
      expect(textEls[0].getAttribute('x')).toEqual('23');
      expect(textEls[0].getAttribute('y')).toEqual('52');
      expect(textEls[0].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[0].getAttribute('font-size')).toEqual('10px');
      expect(textEls[0].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[1].getAttribute('id')).toEqual('linechart-ylabel400');
      expect(textEls[1].textContent).toEqual('400');
      expect(textEls[1].getAttribute('x')).toEqual('23');
      expect(Number(textEls[1].getAttribute('y')).toFixed(1)).toEqual('227.3');
      expect(textEls[1].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[1].getAttribute('font-size')).toEqual('10px');
      expect(textEls[1].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[2].getAttribute('id')).toEqual('linechart-ylabel200');
      expect(textEls[2].textContent).toEqual('200');
      expect(textEls[2].getAttribute('x')).toEqual('23');
      expect(Number(textEls[2].getAttribute('y')).toFixed(1)).toEqual('402.7');
      expect(textEls[2].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[2].getAttribute('font-size')).toEqual('10px');
      expect(textEls[2].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[3].getAttribute('id')).toEqual('linechart-ylabel0');
      expect(textEls[3].textContent).toEqual('0');
      expect(textEls[3].getAttribute('x')).toEqual('23');
      expect(textEls[3].getAttribute('y')).toEqual('578');
      expect(textEls[3].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[3].getAttribute('font-size')).toEqual('10px');
      expect(textEls[3].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('id')).toEqual('linechart-xlabel0');
      expect(textEls[4].textContent).toEqual('0');
      expect(textEls[4].getAttribute('x')).toEqual('25');
      expect(textEls[4].getAttribute('y')).toEqual('585');
      expect(textEls[4].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[4].getAttribute('font-size')).toEqual('10px');
      expect(textEls[4].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('transform')).toEqual('rotate(0,25,585)');
      expect(textEls[5].getAttribute('id')).toEqual('linechart-xlabel50');
      expect(textEls[5].textContent).toEqual('50');
      expect(Number(textEls[5].getAttribute('x')).toFixed(1)).toEqual('276.7');
      expect(textEls[5].getAttribute('y')).toEqual('585');
      expect(textEls[5].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[5].getAttribute('font-size')).toEqual('10px');
      expect(textEls[5].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[5].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[5].getAttribute('transform')).toEqual('rotate(0,276.66666666666663,585)');
      expect(textEls[6].getAttribute('id')).toEqual('linechart-xlabel100');
      expect(textEls[6].textContent).toEqual('100');
      expect(Number(textEls[6].getAttribute('x')).toFixed(1)).toEqual('528.3');
      expect(textEls[6].getAttribute('y')).toEqual('585');
      expect(textEls[6].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[6].getAttribute('font-size')).toEqual('10px');
      expect(textEls[6].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[6].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[6].getAttribute('transform')).toEqual('rotate(0,528.3333333333333,585)');
      expect(textEls[7].getAttribute('id')).toEqual('linechart-xlabel150');
      expect(textEls[7].textContent).toEqual('150');
      expect(textEls[7].getAttribute('x')).toEqual('780');
      expect(textEls[7].getAttribute('y')).toEqual('585');
      expect(textEls[7].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[7].getAttribute('font-size')).toEqual('10px');
      expect(textEls[7].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[7].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[7].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[7].getAttribute('transform')).toEqual('rotate(0,780,585)');

    });
    it('should have a g component with id="linechart-ytitle" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-ytitle');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-ytitle');
      expect(gEl.getAttribute('transform')).toEqual('translate(0,-13)');
    });
    it('should have a text component in the group with id="linechart-ytitle"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-ytitle');
      const textEl: E2EElement = await gEl.find('#linechart-ytitle-text');
      expect(textEl).not.toBeNull();
      expect(textEl.getAttribute('id')).toEqual('linechart-ytitle-text');
      expect(textEl.textContent).toEqual('test for y axis');
      expect(textEl.getAttribute('transform')).toEqual('rotate(-90 15 325)');
      expect(textEl.getAttribute('x')).toEqual('15');
      expect(textEl.getAttribute('y')).toEqual('325');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('fill')).toEqual('#000000');
    });

    it('should have a g component with id="linechart-xtitle" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-xtitle');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-xtitle');
      expect(gEl.getAttribute('transform')).toEqual('translate(12,0)');
    });
    it('should have a text component in the group with id="linechart-xtitle"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-xtitle');
      const textEl: E2EElement = await gEl.find('#linechart-xtitle-text');
      expect(textEl).not.toBeNull();
      expect(textEl.getAttribute('id')).toEqual('linechart-xtitle-text');
      expect(textEl.textContent).toEqual('test for x axis');
      expect(textEl.getAttribute('x')).toEqual('399');
      expect(textEl.getAttribute('y')).toEqual('585');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('10px');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('fill')).toEqual('#000000');
    });
    it('should have a g component with id="linechart-data" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-data');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-data');
    });
    it('should have a polyline component in "linechart-data"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-data');
      const plineEl: E2EElement = await gEl.find('#linechart-data-0');
      expect(plineEl).not.toBeNull();
      expect(plineEl.getAttribute('id')).toEqual('linechart-data-0');
      expect(plineEl.getAttribute('fill')).toEqual('none');
      expect(plineEl.getAttribute('stroke')).toEqual('#425cef');
      expect(plineEl.getAttribute('stroke-width')).toEqual('1');
      expect(plineEl.getAttribute('stroke-linejoin')).toEqual('round');
      expect(plineEl.getAttribute('stroke-linecap')).toEqual('round');
      expect(plineEl.getAttribute('stroke-miterlimit')).toEqual('10');
      expect(plineEl.getAttribute('points')).toEqual("111.78666666666666,177.5 141.26666666666665,208.34 190.4,117.53333333333333 239.53333333333333,168.93333333333334 288.66666666666663,177.5 337.8,134.66666666666669 386.93333333333334,151.8 436.06666666666666,151.8 485.2,211.76666666666668 534.3333333333333,134.66666666666669 583.4666666666667,151.8 632.6,126.1");      
    });
    it('should have an animate component in the polyline when animation is set', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      element.setProperty('animation',true);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-data');
      const plineEl: E2EElement = await gEl.find('#linechart-data-0');
      const animEl: E2EElement = await plineEl.find('animate'); 
      expect(animEl).not.toBeNull();
      expect(plineEl.getAttribute('stroke-dasharray')).toEqual('709.6751866872555,709.6751866872555');
      expect(plineEl.getAttribute('stroke-dashoffset')).toEqual('709.6751866872555');
      expect(animEl.getAttribute('attributeName')).toEqual('stroke-dashoffset');
      expect(animEl.getAttribute('from')).toEqual('709.6751866872555');
      expect(animEl.getAttribute('to')).toEqual('0');
      expect(animEl.getAttribute('dur')).toEqual('1s');
      expect(animEl.getAttribute('fill')).toEqual('freeze');
    });
    it('should have a 12 g components in "linechart-data" if marker data given', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      const cData: any = JSON.parse(data);
      cData.markerType = "plus";
      cData.markerSize = 10;
      cData.markerColor = "#d543ef";
      const data1:string = JSON.stringify(cData);
      element.setProperty('data',data1);
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-data');
      const gEls: E2EElement[] = await gEl.findAll('g');
      const ndata:number = cData.dataPoints.length;
      expect(gEls).not.toBeNull();
      expect(gEls.length).toEqual(ndata);
      expect(gEls[0].getAttribute('id')).toEqual('marker-plus-g-0-0')
      expect(gEls[1].getAttribute('id')).toEqual('marker-plus-g-0-1')
      expect(gEls[2].getAttribute('id')).toEqual('marker-plus-g-0-2')
      expect(gEls[3].getAttribute('id')).toEqual('marker-plus-g-0-3')
      expect(gEls[4].getAttribute('id')).toEqual('marker-plus-g-0-4')
      expect(gEls[5].getAttribute('id')).toEqual('marker-plus-g-0-5')
      expect(gEls[6].getAttribute('id')).toEqual('marker-plus-g-0-6')
      expect(gEls[7].getAttribute('id')).toEqual('marker-plus-g-0-7')
      expect(gEls[8].getAttribute('id')).toEqual('marker-plus-g-0-8')
      expect(gEls[9].getAttribute('id')).toEqual('marker-plus-g-0-9')
      expect(gEls[10].getAttribute('id')).toEqual('marker-plus-g-0-10')
      expect(gEls[11].getAttribute('id')).toEqual('marker-plus-g-0-11')
    });
    it('should have 9 line elements in the group element having id="linechart-axes" and --chart-tick-y-length:4px', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      const opts:StyleTagOptions = {content:':root{--chart-tick-y-length:4px;}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      const lineEls: E2EElement[] = await gEls[6].findAll('line');
      expect(lineEls.length).toEqual(9);
      expect(lineEls[0].getAttribute('id')).toEqual('linechart-yaxis');
      expect(lineEls[0].getAttribute('x1')).toEqual('47');
      expect(lineEls[0].getAttribute('y1')).toEqual('49');
      expect(lineEls[0].getAttribute('x2')).toEqual('47');
      expect(lineEls[0].getAttribute('y2')).toEqual('563');
      expect(lineEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[1].getAttribute('id')).toEqual('linechart-yLine600');
      expect(lineEls[1].getAttribute('x1')).toEqual('47');
      expect(lineEls[1].getAttribute('y1')).toEqual('49');
      expect(lineEls[1].getAttribute('x2')).toEqual('780');
      expect(lineEls[1].getAttribute('y2')).toEqual('49');
      expect(lineEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-ytick600');
      expect(lineEls[2].getAttribute('x1')).toEqual('47');
      expect(lineEls[2].getAttribute('y1')).toEqual('49');
      expect(lineEls[2].getAttribute('x2')).toEqual('43');
      expect(lineEls[2].getAttribute('y2')).toEqual('49');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[3].getAttribute('id')).toEqual('linechart-yLine400');
      expect(lineEls[3].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[3].getAttribute('y1')).toFixed(1)).toEqual('220.3');
      expect(lineEls[3].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[3].getAttribute('y2')).toFixed(1)).toEqual('220.3');
      expect(lineEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-ytick400');
      expect(lineEls[4].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[4].getAttribute('y1')).toFixed(1)).toEqual('220.3');
      expect(lineEls[4].getAttribute('x2')).toEqual('43');
      expect(Number(lineEls[4].getAttribute('y2')).toFixed(1)).toEqual('220.3');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[5].getAttribute('id')).toEqual('linechart-yLine200');
      expect(lineEls[5].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[5].getAttribute('y1')).toFixed(1)).toEqual('391.7');
      expect(lineEls[5].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[5].getAttribute('y2')).toFixed(1)).toEqual('391.7');
      expect(lineEls[5].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[6].getAttribute('id')).toEqual('linechart-ytick200');
      expect(lineEls[6].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[6].getAttribute('y1')).toFixed(1)).toEqual('391.7');
      expect(lineEls[6].getAttribute('x2')).toEqual('43');
      expect(Number(lineEls[6].getAttribute('y2')).toFixed(1)).toEqual('391.7');
      expect(lineEls[6].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[7].getAttribute('id')).toEqual('linechart-xaxis');
      expect(lineEls[7].getAttribute('x1')).toEqual('47');
      expect(lineEls[7].getAttribute('y1')).toEqual('563');
      expect(lineEls[7].getAttribute('x2')).toEqual('780');
      expect(lineEls[7].getAttribute('y2')).toEqual('563');
      expect(lineEls[7].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[7].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[8].getAttribute('id')).toEqual('linechart-ytick0');
      expect(lineEls[8].getAttribute('x1')).toEqual('47');
      expect(lineEls[8].getAttribute('y1')).toEqual('563');
      expect(lineEls[8].getAttribute('x2')).toEqual('43');
      expect(lineEls[8].getAttribute('y2')).toEqual('563');
      expect(lineEls[8].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[8].getAttribute('stroke-width')).toEqual('1');

    });
    it('should have 13 line elements in the group element having id="linechart-axes" and \
      --chart-tick-y-length:4px --chart-tick-x-length:5px', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      const opts:StyleTagOptions = {content:':root{--chart-tick-y-length:4px;--chart-tick-x-length:5px}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      const lineEls: E2EElement[] = await gEls[6].findAll('line');
      expect(lineEls.length).toEqual(13);
      expect(lineEls[0].getAttribute('id')).toEqual('linechart-yaxis');
      expect(lineEls[0].getAttribute('x1')).toEqual('47');
      expect(lineEls[0].getAttribute('y1')).toEqual('49');
      expect(lineEls[0].getAttribute('x2')).toEqual('47');
      expect(lineEls[0].getAttribute('y2')).toEqual('558');
      expect(lineEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[1].getAttribute('id')).toEqual('linechart-yLine600');
      expect(lineEls[1].getAttribute('x1')).toEqual('47');
      expect(lineEls[1].getAttribute('y1')).toEqual('49');
      expect(lineEls[1].getAttribute('x2')).toEqual('780');
      expect(lineEls[1].getAttribute('y2')).toEqual('49');
      expect(lineEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-ytick600');
      expect(lineEls[2].getAttribute('x1')).toEqual('47');
      expect(lineEls[2].getAttribute('y1')).toEqual('49');
      expect(lineEls[2].getAttribute('x2')).toEqual('43');
      expect(lineEls[2].getAttribute('y2')).toEqual('49');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[3].getAttribute('id')).toEqual('linechart-yLine400');
      expect(lineEls[3].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[3].getAttribute('y1')).toFixed(1)).toEqual('218.7');
      expect(lineEls[3].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[3].getAttribute('y2')).toFixed(1)).toEqual('218.7');
      expect(lineEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-ytick400');
      expect(lineEls[4].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[4].getAttribute('y1')).toFixed(1)).toEqual('218.7');
      expect(lineEls[4].getAttribute('x2')).toEqual('43');
      expect(Number(lineEls[4].getAttribute('y2')).toFixed(1)).toEqual('218.7');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[5].getAttribute('id')).toEqual('linechart-yLine200');
      expect(lineEls[5].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[5].getAttribute('y1')).toFixed(1)).toEqual('388.3');
      expect(lineEls[5].getAttribute('x2')).toEqual('780');
      expect(Number(lineEls[5].getAttribute('y2')).toFixed(1)).toEqual('388.3');
      expect(lineEls[5].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[6].getAttribute('id')).toEqual('linechart-ytick200');
      expect(lineEls[6].getAttribute('x1')).toEqual('47');
      expect(Number(lineEls[6].getAttribute('y1')).toFixed(1)).toEqual('388.3');
      expect(lineEls[6].getAttribute('x2')).toEqual('43');
      expect(Number(lineEls[6].getAttribute('y2')).toFixed(1)).toEqual('388.3');
      expect(lineEls[6].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[7].getAttribute('id')).toEqual('linechart-xaxis');
      expect(lineEls[7].getAttribute('x1')).toEqual('47');
      expect(lineEls[7].getAttribute('y1')).toEqual('558');
      expect(lineEls[7].getAttribute('x2')).toEqual('780');
      expect(lineEls[7].getAttribute('y2')).toEqual('558');
      expect(lineEls[7].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[7].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[8].getAttribute('id')).toEqual('linechart-ytick0');
      expect(lineEls[8].getAttribute('x1')).toEqual('47');
      expect(lineEls[8].getAttribute('y1')).toEqual('558');
      expect(lineEls[8].getAttribute('x2')).toEqual('43');
      expect(lineEls[8].getAttribute('y2')).toEqual('558');
      expect(lineEls[8].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[8].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[9].getAttribute('id')).toEqual('linechart-xtick0');
      expect(lineEls[9].getAttribute('x1')).toEqual('47');
      expect(lineEls[9].getAttribute('y1')).toEqual('558');
      expect(lineEls[9].getAttribute('x2')).toEqual('47');
      expect(lineEls[9].getAttribute('y2')).toEqual('563');
      expect(lineEls[9].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[9].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[10].getAttribute('id')).toEqual('linechart-xtick50');
      expect(Number(lineEls[10].getAttribute('x1')).toFixed(1)).toEqual('291.3');
      expect(lineEls[10].getAttribute('y1')).toEqual('558');
      expect(Number(lineEls[10].getAttribute('x2')).toFixed(1)).toEqual('291.3');
      expect(lineEls[10].getAttribute('y2')).toEqual('563');
      expect(lineEls[10].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[10].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[11].getAttribute('id')).toEqual('linechart-xtick100');
      expect(Number(lineEls[11].getAttribute('x1')).toFixed(1)).toEqual('535.7');
      expect(lineEls[11].getAttribute('y1')).toEqual('558');
      expect(Number(lineEls[11].getAttribute('x2')).toFixed(1)).toEqual('535.7');
      expect(lineEls[11].getAttribute('y2')).toEqual('563');
      expect(lineEls[11].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[11].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[12].getAttribute('id')).toEqual('linechart-xtick150');
      expect(lineEls[12].getAttribute('x1')).toEqual('780');
      expect(lineEls[12].getAttribute('y1')).toEqual('558');
      expect(lineEls[12].getAttribute('x2')).toEqual('780');
      expect(lineEls[12].getAttribute('y2')).toEqual('563');
      expect(lineEls[12].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[12].getAttribute('stroke-width')).toEqual('1');
    });
    it('should have 8 text elements in the group element having id="linechart-axes and \
    --chart-tick-y-length:4px --chart-tick-x-length:5px"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      const opts:StyleTagOptions = {content:':root{--chart-tick-y-length:4px;--chart-tick-x-length:5px}'};
      page.addStyleTag(opts);
      await page.waitForChanges();
      await element.callMethod('init');
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      const textEls: E2EElement[] = await gEls[6].findAll('text');
      expect(textEls.length).toEqual(8);
      expect(textEls[0].getAttribute('id')).toEqual('linechart-ylabel600');
      expect(textEls[0].textContent).toEqual('600');
      expect(textEls[0].getAttribute('x')).toEqual('41');
      expect(textEls[0].getAttribute('y')).toEqual('52');
      expect(textEls[0].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[0].getAttribute('font-size')).toEqual('10px');
      expect(textEls[0].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[1].getAttribute('id')).toEqual('linechart-ylabel400');
      expect(textEls[1].textContent).toEqual('400');
      expect(textEls[1].getAttribute('x')).toEqual('41');
      expect(Number(textEls[1].getAttribute('y')).toFixed(1)).toEqual('221.7');
      expect(textEls[1].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[1].getAttribute('font-size')).toEqual('10px');
      expect(textEls[1].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[2].getAttribute('id')).toEqual('linechart-ylabel200');
      expect(textEls[2].textContent).toEqual('200');
      expect(textEls[2].getAttribute('x')).toEqual('41');
      expect(Number(textEls[2].getAttribute('y')).toFixed(1)).toEqual('391.3');
      expect(textEls[2].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[2].getAttribute('font-size')).toEqual('10px');
      expect(textEls[2].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[3].getAttribute('id')).toEqual('linechart-ylabel0');
      expect(textEls[3].textContent).toEqual('0');
      expect(textEls[3].getAttribute('x')).toEqual('41');
      expect(textEls[3].getAttribute('y')).toEqual('561');
      expect(textEls[3].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[3].getAttribute('font-size')).toEqual('10px');
      expect(textEls[3].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('id')).toEqual('linechart-xlabel0');
      expect(textEls[4].textContent).toEqual('0');
      expect(textEls[4].getAttribute('x')).toEqual('47');
      expect(textEls[4].getAttribute('y')).toEqual('573');
      expect(textEls[4].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[4].getAttribute('font-size')).toEqual('10px');
      expect(textEls[4].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('transform')).toEqual('rotate(0,47,573)');
      expect(textEls[5].getAttribute('id')).toEqual('linechart-xlabel50');
      expect(textEls[5].textContent).toEqual('50');
      expect(Number(textEls[5].getAttribute('x')).toFixed(1)).toEqual('291.3');
      expect(textEls[5].getAttribute('y')).toEqual('573');
      expect(textEls[5].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[5].getAttribute('font-size')).toEqual('10px');
      expect(textEls[5].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[5].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[5].getAttribute('transform')).toEqual('rotate(0,291.33333333333337,573)');
      expect(textEls[6].getAttribute('id')).toEqual('linechart-xlabel100');
      expect(textEls[6].textContent).toEqual('100');
      expect(Number(textEls[6].getAttribute('x')).toFixed(1)).toEqual('535.7');
      expect(textEls[6].getAttribute('y')).toEqual('573');
      expect(textEls[6].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[6].getAttribute('font-size')).toEqual('10px');
      expect(textEls[6].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[6].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[6].getAttribute('transform')).toEqual('rotate(0,535.6666666666667,573)');
      expect(textEls[7].getAttribute('id')).toEqual('linechart-xlabel150');
      expect(textEls[7].textContent).toEqual('150');
      expect(textEls[7].getAttribute('x')).toEqual('780');
      expect(textEls[7].getAttribute('y')).toEqual('573');
      expect(textEls[7].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[7].getAttribute('font-size')).toEqual('10px');
      expect(textEls[7].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[7].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[7].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[7].getAttribute('transform')).toEqual('rotate(0,780,573)');

    });
  });
});